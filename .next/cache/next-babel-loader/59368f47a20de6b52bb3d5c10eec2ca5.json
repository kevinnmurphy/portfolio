{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst projectsDirectory = path.join(process.cwd(), 'projects');\nexport function getSortedProjectsData() {\n  // Get file names under /projects\n  const fileNames = fs.readdirSync(projectsDirectory);\n  const allProjectsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    const fullPath = path.join(projectsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the project metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  });\n  return allProjectsData; // return allProjectsData.sort((a, b) => {\n  //   if (a.date < b.date) {\n  //     return 1;\n  //   } else {\n  //     return -1;\n  //   }\n  // });\n}\nexport function getAllProjectIds() {\n  const fileNames = fs.readdirSync(projectsDirectory);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport async function getProjectData(id) {\n  const fullPath = path.join(projectsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the project metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/Users/Kevin/DEV/portfolio/lib/projects.js"],"names":["fs","path","matter","remark","html","projectsDirectory","join","process","cwd","getSortedProjectsData","fileNames","readdirSync","allProjectsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","getAllProjectIds","params","getProjectData","processedContent","use","content","contentHtml","toString"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,iBAAiB,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,UAAzB,CAA1B;AAEA,OAAO,SAASC,qBAAT,GAAiC;AACtC;AACA,QAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,iBAAf,CAAlB;AACA,QAAMO,eAAe,GAAGF,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AAClD;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAFkD,CAIlD;;AACA,UAAMC,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,iBAAV,EAA6BS,QAA7B,CAAjB;AACA,UAAMI,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CANkD,CAQlD;;AACA,UAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CATkD,CAWlD;;AACA;AACEH,MAAAA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAhBuB,CAAxB;AAkBA,SAAOT,eAAP,CArBsC,CAsBtC;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAED,OAAO,SAASU,gBAAT,GAA4B;AACjC,QAAMZ,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,iBAAf,CAAlB;AAEA,SAAOK,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AACjC,WAAO;AACLS,MAAAA,MAAM,EAAE;AACNR,QAAAA,EAAE,EAAED,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,eAAeQ,cAAf,CAA8BT,EAA9B,EAAkC;AACvC,QAAME,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,iBAAV,EAA8B,GAAEU,EAAG,KAAnC,CAAjB;AACA,QAAMG,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAFuC,CAIvC;;AACA,QAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CALuC,CAOvC;;AACA,QAAMO,gBAAgB,GAAG,MAAMtB,MAAM,GAClCuB,GAD4B,CACxBtB,IADwB,EAE5BG,OAF4B,CAEpBa,YAAY,CAACO,OAFO,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB,CAXuC,CAavC;;AACA;AACEd,IAAAA,EADF;AAEEa,IAAAA;AAFF,KAGKR,YAAY,CAACC,IAHlB;AAKD","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\n\nconst projectsDirectory = path.join(process.cwd(), 'projects');\n\nexport function getSortedProjectsData() {\n  // Get file names under /projects\n  const fileNames = fs.readdirSync(projectsDirectory);\n  const allProjectsData = fileNames.map((fileName) => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, '');\n\n    // Read markdown file as string\n    const fullPath = path.join(projectsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n    // Use gray-matter to parse the project metadata section\n    const matterResult = matter(fileContents);\n\n    // Combine the data with the id\n    return {\n      id,\n      ...matterResult.data,\n    };\n  });\n\n  return allProjectsData;\n  // return allProjectsData.sort((a, b) => {\n  //   if (a.date < b.date) {\n  //     return 1;\n  //   } else {\n  //     return -1;\n  //   }\n  // });\n}\n\nexport function getAllProjectIds() {\n  const fileNames = fs.readdirSync(projectsDirectory);\n\n  return fileNames.map((fileName) => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, ''),\n      },\n    };\n  });\n}\n\nexport async function getProjectData(id) {\n  const fullPath = path.join(projectsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n  // Use gray-matter to parse the project metadata section\n  const matterResult = matter(fileContents);\n\n  // Use remark to convert markdown into HTML string\n  const processedContent = await remark()\n    .use(html)\n    .process(matterResult.content);\n  const contentHtml = processedContent.toString();\n\n  // Combine the data with the id and contentHtml\n  return {\n    id,\n    contentHtml,\n    ...matterResult.data,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}